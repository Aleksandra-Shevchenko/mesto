{"version":3,"sources":["webpack://mesto/./src/utils/constants.js","webpack://mesto/./src/components/FormValidator.js","webpack://mesto/./src/components/Card.js","webpack://mesto/./src/components/Section.js","webpack://mesto/./src/components/Popup.js","webpack://mesto/./src/components/popup-with-image.js","webpack://mesto/./src/components/popup-with-form.js","webpack://mesto/./src/components/user-info.js","webpack://mesto/./src/components/Api.js","webpack://mesto/./src/components/PopupWithConfirm.js","webpack://mesto/./src/pages/index.js"],"names":["validationObject","formSelector","inputSelector","submitButtonSelector","inactiveButtonClass","inputErrorClass","errorClass","selectorObj","container","document","querySelector","editButton","addPhotoButton","changeAvatarButton","popupProfileInputs","querySelectorAll","FormValidator","config","popupSelector","this","_formSelector","_inputSelector","_submitBtnSelector","_inactiveButtonClass","_inputErrorClass","_errorClass","_formElement","inputElement","errorMessage","errorElement","id","classList","add","textContent","remove","validity","valid","_hideInputError","_showInputError","validationMessage","inputList","some","buttonElement","_hasInvalidInput","setAttribute","removeAttribute","Array","from","_toggleButtonState","forEach","addEventListener","_checkInputValidity","form","inputsArr","_setEventListeners","Card","templateSelector","userId","data","handleCardClick","handleTrashClick","handleLikeClick","_cardSelector","_name","name","_link","link","_idOwner","owner","_id","_cardId","_likes","likes","_handleCardClick","_handleTrashClick","_handleLikeClick","_userId","content","cloneNode","_element","_getTemplate","_picture","src","alt","_delete","_like","setLikes","like","arr","length","_checkLike","Section","containerSelector","renderer","_renderer","_container","item","element","append","prepend","Popup","_popupSelector","_popupElement","_popupCloseButton","_handleEscClose","bind","removeEventListener","evt","key","close","target","contains","_handlePopupClick","PopupWithImage","_popupTitle","_popupPhoto","title","PopupWithForm","handleSubmit","_handleSubmit","_popupForm","_inputList","_button","_textButton","reset","_formValues","input","value","status","preventDefault","_getInputValues","UserInfo","selectorName","selectorJob","selectorAvatar","_elementName","_elementJob","_avatar","_profileData","about","avatar","Api","baseUrl","headers","_baseUrl","_userUrl","_cardsUrl","_likesUrl","_token","fetch","authorization","then","res","ok","json","Promise","reject","method","body","JSON","stringify","cardId","PopupWithConfirm","_buttonConfirm","submitAction","_handleSubmitCallback","popupWithImage","open","card","popupWithConfirm","setSubmitAction","api","deleteCard","removeCard","catch","err","console","log","handlePopupConfirm","isLiked","dislikedCard","likedCard","createCard","dataCard","generateCard","userData","popupFormProfile","userInfo","getUserInfo","validFormPopupProfile","resetValidationState","popupFormAddCard","validFormPopupAddCard","popupFormChangeAvatar","cardList","cardItem","addItem","setEventListeners","inputsData","renderSaving","saveUserChanges","setUserInfo","finally","postNewCard","addItemPrepend","changedAvatar","enableValidation","all","getUserData","getInitialCards","values","renderItems"],"mappings":"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","file":"index.js","sourcesContent":["// --- ДАННЫЕ  ---\n\n//объект параметров для валидации форм\nconst validationObject = {\n  formSelector: '.popup__form',\n  inputSelector: '.popup__input',\n  submitButtonSelector: '.popup__submit-btn',\n  inactiveButtonClass: 'popup__submit-btn_inactive',\n  inputErrorClass: 'popup__input_type_error',\n  errorClass: 'popup__input-error_active',\n};\n\n\n//селекторы для создания экземпляров классов\nconst selectorObj = {\n  popupImageSelector: '.popup_type_image',\n  popupProfileSelector: '.popup_type_edit',\n  popupAddCardSelector: '.popup_type_add-card',\n  popupChangeAvatarSelector: '.popup_type_change-avatar',\n  elementsSelector: '.elements',\n  profileNameSelector: '.profile__title',\n  profileJobSelector: '.profile__subtitle',\n  cardId: '#card',\n  trashCard: '.element__trash',\n  popupConfirmSelector: '.popup_type_confirm',\n  avatarSelector:'.profile__avatar',\n};\n\n\nconst container = document.querySelector(\".container\");\nconst editButton = container.querySelector(\".profile__edit-btn\");\nconst addPhotoButton = container.querySelector(\".profile__add-btn\");\nconst changeAvatarButton = container.querySelector(\".profile__change-btn\");\nconst popupProfile = document.querySelector('.popup_type_edit');\nconst popupProfileInputs = popupProfile.querySelectorAll('.popup__input');\n\n\nexport {\n  validationObject,\n  editButton,\n  addPhotoButton,\n  selectorObj,\n  popupProfileInputs,\n  changeAvatarButton\n};\n","// --- КЛАСС ВАЛИДАЦИИ ФОРМ ---\n\nexport default class FormValidator {\n  constructor(config, popupSelector) {\n    this._formSelector = config.formSelector;\n    this._inputSelector = config.inputSelector;\n    this._submitBtnSelector = config.submitButtonSelector;\n    this._inactiveButtonClass = config.inactiveButtonClass;\n    this._inputErrorClass = config.inputErrorClass;\n    this._errorClass = config.errorClass;\n    this._formElement = document.querySelector(popupSelector);\n  }\n\n  //метод появления сообщения об ошибке\n  _showInputError(inputElement, errorMessage) {\n    const errorElement = this._formElement.querySelector(`#${inputElement.id}-error`);\n\n    inputElement.classList.add(this._inputErrorClass);\n    errorElement.textContent = errorMessage;\n    errorElement.classList.add(this._errorClass);\n  }\n\n  //метод скрытия сообщения об ошибке\n  _hideInputError(inputElement) {\n    const errorElement = this._formElement.querySelector(`#${inputElement.id}-error`);\n\n    inputElement.classList.remove(this._inputErrorClass);\n    errorElement.classList.remove(this._errorClass);\n    errorElement.textContent = '';\n  }\n\n\n  //метод управления сообщениями об ошибках\n  _checkInputValidity(inputElement) {\n    if(inputElement.validity.valid) {\n      this._hideInputError(inputElement);\n    } else {\n      this._showInputError(inputElement, inputElement.validationMessage);\n    }\n  }\n\n  //метод проверки на невалидные поля\n  _hasInvalidInput(inputList) {\n    return inputList.some(inputElement => {\n      return !inputElement.validity.valid;\n    });\n  }\n\n\n  //метод включения/выключения кнопки submit в форме\n  _toggleButtonState(inputList, buttonElement) {\n    if(this._hasInvalidInput(inputList)) {\n      buttonElement.setAttribute('disabled', true);\n      buttonElement.classList.add(this._inactiveButtonClass);\n    } else {\n      buttonElement.removeAttribute('disabled');\n      buttonElement.classList.remove(this._inactiveButtonClass);\n    }\n  }\n\n  //метод добавления слушателей для каждого поля ввода\n  _setEventListeners() {\n    const inputList = Array.from(this._formElement.querySelectorAll(this._inputSelector));\n    const buttonElement = this._formElement.querySelector(this._submitBtnSelector);\n    this._toggleButtonState(inputList, buttonElement);\n\n    inputList.forEach((inputElement) => {\n      inputElement.addEventListener('input', () => {\n        this._checkInputValidity(inputElement);\n\n        this._toggleButtonState(inputList, buttonElement);\n      });\n    });\n  }\n\n  //метод сброса результатов проверки формы\n  resetValidationState() {\n    const form = this._formElement.querySelector(this._formSelector);\n    const inputsArr = Array.from(form.querySelectorAll(this._inputSelector));\n    const buttonElement = form.querySelector(this._submitBtnSelector);\n\n    this._toggleButtonState(inputsArr, buttonElement);\n\n    inputsArr.forEach((inputElement) => {\n      this._hideInputError(inputElement);\n    });\n  }\n\n  //метод включения валидации\n  enableValidation() {\n    this._setEventListeners();\n  }\n}\n","// --- КЛАСС СОЗДАНИЯ КАРТОЧЕК ---\n\nexport default class Card {\n  constructor({\n    data,\n    handleCardClick,\n    handleTrashClick,\n    handleLikeClick\n  }, templateSelector, userId) {\n    this._cardSelector = templateSelector;\n    this._name = data.name;\n    this._link = data.link;\n    this._idOwner = data.owner._id;\n    this._cardId = data._id;\n    this._likes = data.likes;\n    this._handleCardClick = handleCardClick;\n    this._handleTrashClick = handleTrashClick;\n    this._handleLikeClick = handleLikeClick;\n    this._userId = userId;\n  }\n\n  _getTemplate() {\n    const cardElement = document\n      .querySelector(this._cardSelector)\n      .content\n      .querySelector('.element')\n      .cloneNode(true);\n\n    return cardElement;\n  }\n\n  generateCard() {\n    this._element = this._getTemplate();\n    this._picture = this._element.querySelector('.element__pic');\n    this._picture.src = this._link;\n    this._picture.alt = `Фото ${this._name}`;\n    this._element.querySelector('.element__title').textContent = this._name;\n    this._delete = this._element.querySelector('.element__trash');\n    this._like = this._element.querySelector('.element__like');\n\n    //отображаем кнопку \"Корзина\" только у карточек пользователя\n    if (this._userId !== this._idOwner) {\n      this._delete.remove();\n    }\n\n    this.setLikes(this._likes);\n    this._setEventListeners();\n\n    return this._element;\n  }\n\n  removeCard() {\n    this._element.remove();\n    this._element = null;\n  }\n\n  _checkLike() {\n    return this._likes.some(like => {\n      return like._id === this._userId;\n    });\n  }\n\n  //метод принимает данные лайков карточки и обновляет отображение карточки\n  setLikes(arr) {\n    this._element.querySelector('.element__sum-like').textContent = arr.length;\n    this._likes = arr;\n    if (this._checkLike()) {\n      this._like.classList.add('element__like_active');\n    } else {\n      this._like.classList.remove('element__like_active');\n    }\n  }\n\n  _setEventListeners() {\n    this._picture.addEventListener('click', () => {\n      this._handleCardClick(this._name, this._link);\n    });\n\n    this._delete.addEventListener('click', () => {\n      this._handleTrashClick(this._cardId, this);\n    });\n\n    this._like.addEventListener('click', () => {\n      this._handleLikeClick(this._cardId, this._checkLike(), this);\n    });\n  }\n}\n","// --- КЛАСС ОТВЕЧАЮЩИЙ ЗА ОТРИСОВКУ ЭЛЕМЕНТОВ НА СТРАНИЦЕ ---\n\nexport default class Section {\n  constructor({ renderer }, containerSelector) {\n    this._renderer = renderer; // функция, которая отвечает за создание и отрисовку данных на странице\n    this._container = document.querySelector(containerSelector);\n  }\n\n  //метод, который отвечает за отрисовку всех элементов\n  renderItems(arr, id) {\n    arr.forEach((item)=> this._renderer(item, id));\n  }\n\n  //метод, который принимает DOM-элемент и добавляет его в начало контейнера\n  addItem(element) {\n    this._container.append(element);\n  }\n\n  addItemPrepend(element) {\n    this._container.prepend(element);\n  }\n}\n","// --- КЛАСС ОТКРЫТИЯ/ЗАКРЫТИЯ ПОПАПОВ ---\n\nexport default class Popup {\n  constructor(popupSelector) {\n    this._popupSelector = popupSelector;\n    this._popupElement = document.querySelector(this._popupSelector);\n    this._popupCloseButton = this._popupElement.querySelector('.popup__close');\n    this._handleEscClose = this._handleEscClose.bind(this);\n  }\n\n  open() {\n    this._popupElement.classList.add('popup_opened');\n    document.addEventListener('keydown', this._handleEscClose);\n  }\n\n  close() {\n    this._popupElement.classList.remove('popup_opened');\n    document.removeEventListener('keydown', this._handleEscClose);\n  }\n\n  //функция обработки нажатия клавиши Esc для закрытия попапа\n  _handleEscClose(evt) {\n    if (evt.key === 'Escape') {\n      this.close();\n    }\n  }\n\n  //функция обработки клика за пределами области popup__container\n  _handlePopupClick(evt) {\n    if (evt.target.classList.contains(\"popup\")) {\n      this.close();\n    }\n  }\n\n  setEventListeners() {\n    this._popupCloseButton.addEventListener('click', () => this.close());\n\n    this._popupElement.addEventListener(\"mousedown\", (evt) => this._handlePopupClick(evt));\n  }\n}\n","// --- КЛАСС СОЗДАНИЯ ПОПАПА С ИЗОБРАЖЕНИЕМ ---\n\nimport Popup from \"./Popup.js\";\n\nexport default class PopupWithImage extends Popup {\n  constructor(popupSelector) {\n    super(popupSelector);\n    this._popupTitle = this._popupElement.querySelector('.popup__photo-title');\n    this._popupPhoto = this._popupElement.querySelector('.popup__photo');\n  }\n\n  open(title, link) {\n    super.open();\n    this._popupTitle.textContent = title;\n    this._popupPhoto.src = link;\n    this._popupPhoto.alt = `Фото ${title}`;\n  }\n}\n","// --- КЛАСС РАБОТЫ С ФОРМАМИ В ПОПАПАХ ---\n\nimport Popup from './Popup.js';\n\nexport default class PopupWithForm extends Popup {\n  constructor(popupSelector, handleSubmit) {\n    super(popupSelector);\n    this._handleSubmit = handleSubmit;\n    this._popupForm = this._popupElement.querySelector(\".popup__form\");\n    this._inputList = this._popupElement.querySelectorAll(\".popup__input\");\n    this._button = this._popupForm.querySelector('.popup__submit-btn');\n    this._textButton = this._button.textContent;\n  }\n\n  close() {\n    super.close();\n    this._popupForm.reset();\n  }\n\n  // метод, который собирает данные всех полей формы\n  _getInputValues() {\n    this._formValues = {};\n\n    this._inputList.forEach((input) => {\n      this._formValues[input.name] = input.value;\n    });\n\n    return this._formValues;\n  }\n\n  renderSaving(status){\n    if(status){\n      this._button.textContent = `Cохранение...`;\n    } else {\n      this._button.textContent = this._textButton;\n    }\n  }\n\n  // дополнительно добавляем обработчик сабмита формы\n  setEventListeners() {\n    super.setEventListeners();\n    this._popupForm.addEventListener(\"submit\", (evt) => {\n      evt.preventDefault();\n      this._handleSubmit(this._getInputValues());\n    });\n  }\n}\n","// --- КЛАСС ОТОБРАЖЕНИЯ ИНФОРМАЦИИ О ПОЛЬЗОВАТЕЛЕ НА СТРАНИЦЕ ---\n\nexport default class UserInfo {\n  constructor({ selectorName, selectorJob, selectorAvatar }) {\n    this._elementName =  document.querySelector(selectorName);\n    this._elementJob = document.querySelector(selectorJob);\n    this._avatar = document.querySelector(selectorAvatar);\n  }\n\n  //метод который возвращает объект с данными пользователя\n  getUserInfo() {\n    return this._profileData = {\n      name: this._elementName.textContent,\n      about: this._elementJob.textContent,\n    };\n  }\n\n  //метод который принимает новые данные пользователя и добавляет их на страницу\n  setUserInfo({ name, about, avatar }) {\n    this._elementName.textContent = name;\n    this._elementJob.textContent = about;\n    this._avatar.src = avatar;\n  }\n}\n","// --- КЛАСС ДЛЯ ОТПРАВКИ ЗАПРОСОВ НА СЕРВЕР ---\n\nexport default class Api {\n  constructor({\n    baseUrl,\n    headers\n  }) {\n    this._baseUrl = baseUrl;\n    this._userUrl = `${this._baseUrl}/users/me`;\n    this._cardsUrl = `${this._baseUrl}/cards`;\n    this._likesUrl = `${this._baseUrl}/cards/likes`;\n    this._token = headers['authorization'];\n  }\n\n  //метод получения информации о пользователе с сервера\n  getUserData() {\n    return fetch(this._userUrl, {\n        headers: {\n          authorization: this._token,\n        }\n      })\n      .then(res => {\n        if (res.ok) {\n          return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n      })\n  }\n\n  //метод сохранения отредактированных данных пользователя на сервере\n  saveUserChanges({\n    name,\n    about\n  }) {\n    return fetch(this._userUrl, {\n        method: 'PATCH',\n        headers: {\n          authorization: this._token,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: name,\n          about: about,\n        })\n      })\n      .then(res => {\n        if (res.ok) {\n          return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n      })\n  }\n\n  //метод обновления аватара пользователя\n  changedAvatar(src) {\n    return fetch(`${this._userUrl}/avatar`, {\n        method: 'PATCH',\n        headers: {\n          authorization: this._token,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          avatar: src.link\n        })\n      })\n      .then(res => {\n        if (res.ok) {\n          return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n      })\n  }\n\n  //метод получения карточек с сервера\n  getInitialCards() {\n    return fetch(this._cardsUrl, {\n        headers: {\n          authorization: this._token,\n        }\n      })\n      .then(res => {\n        if (res.ok) {\n          return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n      })\n  }\n\n  //метод добавления новой карточки на сервер\n  postNewCard({\n    name,\n    link\n  }) {\n    return fetch(this._cardsUrl, {\n        method: 'POST',\n        headers: {\n          authorization: this._token,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: name,\n          link: link,\n        })\n      })\n      .then(res => {\n        if (res.ok) {\n          return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n      })\n  }\n\n  //метод удаления карточки пользователя с сервера\n  deleteCard(cardId) {\n    return fetch(`${this._cardsUrl}/${cardId}`, {\n        method: 'DELETE',\n        headers: {\n          authorization: this._token,\n        }\n      })\n      .then(res => {\n        if (res.ok) {\n          return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n      })\n  }\n\n  //метод постановки лайка карточке\n  likedCard(cardId) {\n    return fetch(`${this._likesUrl}/${cardId}`, {\n        method: 'PUT',\n        headers: {\n          authorization: this._token,\n        }\n      })\n      .then(res => {\n        if (res.ok) {\n          return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n      })\n  }\n\n  //метод удаления лайка с карточки\n  dislikedCard(cardId) {\n    return fetch(`${this._likesUrl}/${cardId}`, {\n        method: 'DELETE',\n        headers: {\n          authorization: this._token,\n        }\n      })\n      .then(res => {\n        if (res.ok) {\n          return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n      })\n  }\n}\n","// --- КЛАСС СОЗДАНИЯ ПОПАПА С КНОПКОЙ ПОДТВЕРЖДЕНИЯ УДАЛЕНИЯ КАРТОЧКИ ---\n\nimport Popup from './Popup.js';\n\nexport default class PopupWithConfirm extends Popup {\n  constructor(popupSelector) {\n    super(popupSelector);\n    this._buttonConfirm = this._popupElement.querySelector('.popup__form');\n  }\n\n  setSubmitAction(submitAction) {\n    this._handleSubmitCallback = submitAction;\n  }\n\n  // дополнительно добавляем обработчик клика подтверждения\n  setEventListeners() {\n    super.setEventListeners();\n    this._buttonConfirm.addEventListener(\"submit\", (evt) => {\n      evt.preventDefault();\n      this._handleSubmitCallback()\n    });\n  }\n\n}\n","import './index.css';\n\nimport {\n  validationObject,\n  selectorObj,\n  editButton,\n  addPhotoButton,\n  popupProfileInputs,\n  changeAvatarButton\n} from \"../utils/constants.js\";\n\nimport FormValidator from \"../components/FormValidator.js\";\nimport Card from \"../components/Card.js\";\nimport Section from \"../components/Section.js\";\nimport PopupWithImage from \"../components/popup-with-image.js\";\nimport PopupWithForm from \"../components/popup-with-form.js\";\nimport UserInfo from \"../components/user-info.js\";\nimport Api from \"../components/Api.js\";\nimport PopupWithConfirm from \"../components/PopupWithConfirm.js\";\n\n\n// --- ФУНКЦИИ ---\n//функция открытия попапа с картинкой (при клике на карточку)\nfunction handleCardClick(title, link) {\n  popupWithImage.open(title, link);\n}\n\n//функция открытия попапа с подтверждением (при клике на корзину)\nfunction handleTrashClick(id, card) {\n  popupWithConfirm.setSubmitAction(() => handlePopupConfirm(id, card))\n  popupWithConfirm.open();\n}\n\n// функция удаления карточек от пользователя (подтверждение)\nfunction handlePopupConfirm(id, card) {\n  api.deleteCard(id)\n    .then(() => {\n      card.removeCard();\n      popupWithConfirm.close();\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n}\n\n// функция отвечающая за постановку лайка\nfunction handleLikeClick(id, isLiked, card) {\n  if (isLiked) {\n    //отправляем запрос снятия лайка\n    api.dislikedCard(id)\n      .then((data) => {\n        card.setLikes(data.likes);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  } else {\n    //отправляем запрос на установку лайка\n    api.likedCard(id)\n      .then((data) => {\n        card.setLikes(data.likes);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n}\n\n// функция редактирования профиля (сабмит формы)\nfunction handlePopupProfile(inputsData) {\n  popupFormProfile.renderSaving(true);\n\n  api.saveUserChanges(inputsData)\n    .then((data) => {\n      userInfo.setUserInfo(data);\n      popupFormProfile.close();\n    })\n    .catch((err) => {\n      console.log(err);\n    })\n    .finally(() => {\n      popupFormProfile.renderSaving(false);\n    })\n}\n\n// функция заполнения полей формы данными из профиля\nfunction handleTextInput() {\n  const userData = userInfo.getUserInfo();\n  popupProfileInputs.forEach(input => {\n    input.value = userData[input.name];\n  });\n}\n\n// функция создания карточек\nfunction createCard(dataCard, id) {\n  const card = new Card({\n      data: dataCard,\n      handleCardClick,\n      handleTrashClick,\n      handleLikeClick,\n    },\n    selectorObj.cardId,\n    id);\n\n  const newCard = card.generateCard();\n\n  return newCard;\n}\n\n// функция добавления новых карточек от пользователя (сабмит формы)\nfunction handlePopupAddCard(inputsData) {\n  popupFormAddCard.renderSaving(true);\n\n  api.postNewCard(inputsData)\n    .then((data) => {\n      cardList.addItemPrepend(createCard(data, data.owner._id));\n      popupFormAddCard.close();\n    })\n    .catch((err) => {\n      console.log(err);\n    })\n    .finally(() => {\n      popupFormAddCard.renderSaving(false);\n    })\n}\n\n// функция редактирования аватара пользователя (сабмит формы)\nfunction handlePopupChangeAvatar(inputsData) {\n  popupFormChangeAvatar.renderSaving(true);\n\n  api.changedAvatar(inputsData)\n    .then((data) => {\n      userInfo.setUserInfo(data);\n      popupFormChangeAvatar.close();\n    })\n    .catch((err) => {\n      console.log(err);\n    })\n    .finally(() => {\n      popupFormChangeAvatar.renderSaving(false);\n    })\n}\n\n\n\n// --- СЛУШАТЕЛИ СОБЫТИЙ ---\n//обработчик клика открытия попапа по кнопке 'Редактирования профиля'\neditButton.addEventListener('click', () => {\n  popupFormProfile.open();\n  handleTextInput();\n  validFormPopupProfile.resetValidationState();\n});\n\n//oбработчик клика открытия попапа по кнопке 'Добавление карточки'\naddPhotoButton.addEventListener('click', () => {\n  popupFormAddCard.open();\n  validFormPopupAddCard.resetValidationState();\n});\n\n//oбработчик клика открытия попапа по кнопке 'Редактирование аватара'\nchangeAvatarButton.addEventListener('click', () => {\n  popupFormChangeAvatar.open();\n  validFormPopupAddCard.resetValidationState();\n});\n\n\n\n// --- ДЕЙСТВИЯ ПРИ ЗАГРУЗКЕ СТРАНИЦЫ ---\n//создаем экземпляр класса Section\nconst cardList = new Section({\n    renderer: (cardItem, id) => {\n      cardList.addItem(createCard(cardItem, id));\n    },\n  },\n  selectorObj.elementsSelector\n);\n\n\n//создаем экземпляр класса PopupWhithImage и навешиваем слушатели событий\nconst popupWithImage = new PopupWithImage(selectorObj.popupImageSelector);\npopupWithImage.setEventListeners();\n\n//создаем экземпляр класса PopupWhithConfirm\n//и навешиваем слушатели событий\nconst popupWithConfirm = new PopupWithConfirm(selectorObj.popupConfirmSelector);\npopupWithConfirm.setEventListeners();\n\n\n//создаем экземпляр класса PopupWhithForm для попапа 'Редактирование профиля'\n//и навешиваем слушатели событий\nconst popupFormProfile = new PopupWithForm(selectorObj.popupProfileSelector, handlePopupProfile);\npopupFormProfile.setEventListeners();\n\n//создаем экземпляр класса PopupWhithForm для попапа 'Добавление карточки'\n//и навешиваем слушатели событий\nconst popupFormAddCard = new PopupWithForm(selectorObj.popupAddCardSelector, handlePopupAddCard);\npopupFormAddCard.setEventListeners();\n\n//создаем экземпляр класса PopupWhithForm для попапа 'Редактирование аватара'\n//и навешиваем слушатели событий\nconst popupFormChangeAvatar = new PopupWithForm(selectorObj.popupChangeAvatarSelector, handlePopupChangeAvatar);\npopupFormChangeAvatar.setEventListeners();\n\n\n//создаем экземпляры класса FormValidator и включаем валидацию форм\nconst validFormPopupAddCard = new FormValidator(validationObject, selectorObj.popupAddCardSelector);\nvalidFormPopupAddCard.enableValidation();\n\nconst validFormPopupProfile = new FormValidator(validationObject, selectorObj.popupProfileSelector);\nvalidFormPopupProfile.enableValidation();\n\nconst validFormPopupChangeAvatar = new FormValidator(validationObject, selectorObj.popupChangeAvatarSelector);\nvalidFormPopupChangeAvatar.enableValidation();\n\n\n//создаем экземпляр класса UserInfo\nconst userInfo = new UserInfo({\n  selectorName: selectorObj.profileNameSelector,\n  selectorJob: selectorObj.profileJobSelector,\n  selectorAvatar: selectorObj.avatarSelector,\n});\n\n//создаем экземпляр класса Api\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-19',\n  headers: {\n    authorization: '249de57f-61eb-4f88-a95a-b462a0c3429a',\n    'Content-Type': 'application/json'\n  }\n});\n\n//в Promise.all передаем массив промисов, которые нужно выполнить\nPromise.all([\n    api.getUserData(),\n    api.getInitialCards()\n  ])\n  .then((values) => {\n    userInfo.setUserInfo(values[0])\n    cardList.renderItems(values[1], values[0]._id);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n"],"sourceRoot":""}