{"version":3,"sources":["webpack://mesto/./src/utils/constants.js","webpack://mesto/./src/components/FormValidator.js","webpack://mesto/./src/components/Card.js","webpack://mesto/./src/components/Section.js","webpack://mesto/./src/components/Popup.js","webpack://mesto/./src/components/popup-with-image.js","webpack://mesto/./src/components/popup-with-form.js","webpack://mesto/./src/components/user-info.js","webpack://mesto/./src/components/Api.js","webpack://mesto/./src/components/PopupWithConfirm.js","webpack://mesto/./src/pages/index.js"],"names":["validationObject","formSelector","inputSelector","submitButtonSelector","inactiveButtonClass","inputErrorClass","errorClass","selectorObj","container","document","querySelector","editButton","addPhotoButton","changeAvatarButton","popupProfileInputs","querySelectorAll","FormValidator","config","popupSelector","this","_formSelector","_inputSelector","_submitBtnSelector","_inactiveButtonClass","_inputErrorClass","_errorClass","_formElement","inputElement","errorMessage","errorElement","id","classList","add","textContent","remove","validity","valid","_hideInputError","_showInputError","validationMessage","inputList","some","buttonElement","_hasInvalidInput","setAttribute","removeAttribute","Array","from","_toggleButtonState","forEach","addEventListener","_checkInputValidity","form","inputsArr","_setEventListeners","Card","templateSelector","userId","data","handleCardClick","handleTrashClick","handleLikeClick","_cardSelector","_name","name","_link","link","_showPopup","_handleTrashClick","_handleLikeClick","_idOwner","owner","_id","_userId","_cardId","_likes","likes","content","cloneNode","_element","_getTemplate","_picture","src","alt","_delete","_like","like","_checkLike","arr","length","Section","containerSelector","renderer","_renderer","_container","item","element","append","prepend","Popup","_popupSelector","_popupElement","_popupCloseButton","_handleEscClose","bind","removeEventListener","evt","key","close","target","contains","_handlePopupClick","PopupWithImage","_popupTitle","_popupPhoto","title","PopupWithForm","handleSubmit","_handleSubmit","_popupForm","_inputList","_button","_textButton","reset","_formValues","input","value","status","preventDefault","_getInputValues","UserInfo","selectorName","selectorJob","selectorAvatar","_elementName","_elementJob","_avatar","_profileData","popupName","popupJob","avatar","Api","baseUrl","headers","_baseUrl","_userUrl","_cardsUrl","_likesUrl","_token","fetch","authorization","then","res","ok","json","Promise","reject","method","body","JSON","stringify","about","cardId","PopupWithConfirm","_buttonConfirm","submitAction","_handleSubmitCallback","popupWithImage","open","card","popupWithConfirm","setSubmitAction","api","deleteCard","removeCard","catch","err","console","log","handlePopupConfirm","isLiked","dislikedCard","setLikes","likedCard","createCard","dataCard","newCard","generateCard","userData","popupFormProfile","userInfo","getUserInfo","validFormPopupProfile","resetValidationState","popupFormAddCard","validFormPopupAddCard","popupFormChangeAvatar","cardList","cardItem","addItem","setEventListeners","inputsData","renderSaving","saveUserChanges","setUserInfo","finally","postNewCard","addItemPrepend","changedAvatar","enableValidation","all","getUserData","getInitialCards","values","renderItems"],"mappings":"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","file":"index.js","sourcesContent":["// --- ДАННЫЕ  ---\n\n//объект параметров для валидации форм\nconst validationObject = {\n  formSelector: '.popup__form',\n  inputSelector: '.popup__input',\n  submitButtonSelector: '.popup__submit-btn',\n  inactiveButtonClass: 'popup__submit-btn_inactive',\n  inputErrorClass: 'popup__input_type_error',\n  errorClass: 'popup__input-error_active',\n};\n\n//массив отображаемых карточек при загрузке страницы\nconst initialCards = [\n  {\n    name: 'Архыз',\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg'\n  },\n  {\n    name: 'Челябинская область',\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg'\n  },\n  {\n    name: 'Иваново',\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg'\n  },\n  {\n    name: 'Камчатка',\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg'\n  },\n  {\n    name: 'Холмогорский район',\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg'\n  },\n  {\n    name: 'Байкал',\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg'\n  }\n];\n\n//селекторы для создания экземпляров классов\nconst selectorObj = {\n  popupImageSelector: '.popup_type_image',\n  popupProfileSelector: '.popup_type_edit',\n  popupAddCardSelector: '.popup_type_add-card',\n  popupChangeAvatarSelector: '.popup_type_change-avatar',\n  elementsSelector: '.elements',\n  profileNameSelector: '.profile__title',\n  profileJobSelector: '.profile__subtitle',\n  cardId: '#card',\n  trashCard: '.element__trash',\n  popupConfirmSelector: '.popup_type_confirm',\n  avatarSelector:'.profile__avatar',\n};\n\n\nconst container = document.querySelector(\".container\");\nconst editButton = container.querySelector(\".profile__edit-btn\");\nconst addPhotoButton = container.querySelector(\".profile__add-btn\");\nconst changeAvatarButton = container.querySelector(\".profile__change-btn\");\nconst popupProfile = document.querySelector('.popup_type_edit');\nconst popupProfileInputs = popupProfile.querySelectorAll('.popup__input');\n\n\nexport {\n  validationObject,\n  initialCards,\n  editButton,\n  addPhotoButton,\n  selectorObj,\n  popupProfileInputs,\n  changeAvatarButton\n};\n","// --- КЛАСС ВАЛИДАЦИИ ФОРМ ---\n\nexport default class FormValidator {\n  constructor(config, popupSelector) {\n    this._formSelector = config.formSelector;\n    this._inputSelector = config.inputSelector;\n    this._submitBtnSelector = config.submitButtonSelector;\n    this._inactiveButtonClass = config.inactiveButtonClass;\n    this._inputErrorClass = config.inputErrorClass;\n    this._errorClass = config.errorClass;\n    this._formElement = document.querySelector(popupSelector);\n  }\n\n  //метод появления сообщения об ошибке\n  _showInputError(inputElement, errorMessage) {\n    const errorElement = this._formElement.querySelector(`#${inputElement.id}-error`);\n\n    inputElement.classList.add(this._inputErrorClass);\n    errorElement.textContent = errorMessage;\n    errorElement.classList.add(this._errorClass);\n  }\n\n  //метод скрытия сообщения об ошибке\n  _hideInputError(inputElement) {\n    const errorElement = this._formElement.querySelector(`#${inputElement.id}-error`);\n\n    inputElement.classList.remove(this._inputErrorClass);\n    errorElement.classList.remove(this._errorClass);\n    errorElement.textContent = '';\n  }\n\n\n  //метод управления сообщениями об ошибках\n  _checkInputValidity(inputElement) {\n    if(inputElement.validity.valid) {\n      this._hideInputError(inputElement);\n    } else {\n      this._showInputError(inputElement, inputElement.validationMessage);\n    }\n  }\n\n  //метод проверки на невалидные поля\n  _hasInvalidInput(inputList) {\n    return inputList.some(inputElement => {\n      return !inputElement.validity.valid;\n    });\n  }\n\n\n  //метод включения/выключения кнопки submit в форме\n  _toggleButtonState(inputList, buttonElement) {\n    if(this._hasInvalidInput(inputList)) {\n      buttonElement.setAttribute('disabled', true);\n      buttonElement.classList.add(this._inactiveButtonClass);\n    } else {\n      buttonElement.removeAttribute('disabled');\n      buttonElement.classList.remove(this._inactiveButtonClass);\n    }\n  }\n\n  //метод добавления слушателей для каждого поля ввода\n  _setEventListeners() {\n    const inputList = Array.from(this._formElement.querySelectorAll(this._inputSelector));\n    const buttonElement = this._formElement.querySelector(this._submitBtnSelector);\n    this._toggleButtonState(inputList, buttonElement);\n\n    inputList.forEach((inputElement) => {\n      inputElement.addEventListener('input', () => {\n        this._checkInputValidity(inputElement);\n\n        this._toggleButtonState(inputList, buttonElement);\n      });\n    });\n  }\n\n  //метод сброса результатов проверки формы\n  resetValidationState() {\n    const form = this._formElement.querySelector(this._formSelector);\n    const inputsArr = Array.from(form.querySelectorAll(this._inputSelector));\n    const buttonElement = form.querySelector(this._submitBtnSelector);\n\n    this._toggleButtonState(inputsArr, buttonElement);\n\n    inputsArr.forEach((inputElement) => {\n      this._hideInputError(inputElement);\n    });\n  }\n\n  //метод включения валидации\n  enableValidation() {\n    this._setEventListeners();\n  }\n}\n","// --- КЛАСС СОЗДАНИЯ КАРТОЧЕК ---\n\nexport default class Card {\n  constructor( { data, handleCardClick, handleTrashClick, handleLikeClick }, templateSelector, userId) {\n    this._cardSelector = templateSelector;\n    this._name = data.name;\n    this._link = data.link;\n    this._showPopup = handleCardClick;\n    this._handleTrashClick = handleTrashClick;\n    this._handleLikeClick = handleLikeClick;\n    this._idOwner = data.owner._id;\n    this._userId = userId;\n    this._cardId = data._id;\n    this._likes = data.likes;\n  }\n\n  _getTemplate() {\n    const cardElement = document\n    .querySelector(this._cardSelector)\n    .content\n    .querySelector('.element')\n    .cloneNode(true);\n\n    return cardElement;\n  }\n\n  generateCard() {\n    this._element = this._getTemplate();\n    this._picture = this._element.querySelector('.element__pic');\n    this._picture.src = this._link;\n    this._picture.alt =`Фото ${this._name}`;\n    this._element.querySelector('.element__title').textContent = this._name;\n    this._delete = this._element.querySelector('.element__trash');\n    this._like = this._element.querySelector('.element__like');\n\n    if(this._userId !== this._idOwner) {\n      this._delete.remove();\n    }\n\n    this._setEventListeners();\n\n    return this._element;\n  }\n\n  removeCard() {\n    this._element.remove();\n    this._element = null;\n  }\n\n  _checkLike() {\n    return this._likes.some(like => {\n      return like._id === this._userId;\n    })\n  }\n\n  _setEventListeners() {\n    this._picture.addEventListener('click', () => {\n      this._showPopup(this._name, this._link);\n    });\n\n    this._delete.addEventListener('click', () => {\n      this._handleTrashClick(this._cardId, this);\n    });\n\n    this._like.addEventListener('click', () => {\n      this._handleLikeClick(this._cardId, this._checkLike(), this);\n    });\n  }\n\n\n  //метод принимает данные лайков карточки и обновляет отображение карточки. Он используется при первой отрисовке карточки и при ответе сервера на установку и снятие лайка\n  setLikes(arr){\n    this._element.querySelector('.element__sum-like').textContent = arr.length;\n    this._likes = arr;\n    if(this._checkLike()){\n      this._like.classList.add('element__like_active');\n    } else {\n      this._like.classList.remove('element__like_active');\n    }\n  }\n}\n","// --- КЛАСС ОТВЕЧАЮЩИЙ ЗА ОТРИСОВКУ ЭЛЕМЕНТОВ НА СТРАНИЦЕ ---\n\nexport default class Section {\n  constructor({ renderer }, containerSelector) {\n    this._renderer = renderer; // функция, которая отвечает за создание и отрисовку данных на странице\n    this._container = document.querySelector(containerSelector);\n  }\n\n  //метод, который отвечает за отрисовку всех элементов\n  renderItems(arr, id) {\n    arr.forEach((item)=> this._renderer(item, id));\n  }\n\n  //метод, который принимает DOM-элемент и добавляет его в начало контейнера\n  addItem(element) {\n    this._container.append(element);\n  }\n\n  addItemPrepend(element) {\n    this._container.prepend(element);\n  }\n}\n","// --- КЛАСС ОТКРЫТИЯ/ЗАКРЫТИЯ ПОПАПОВ ---\n\nexport default class Popup {\n  constructor(popupSelector) {\n    this._popupSelector = popupSelector;\n    this._popupElement = document.querySelector(this._popupSelector);\n    this._popupCloseButton = this._popupElement.querySelector('.popup__close');\n    this._handleEscClose = this._handleEscClose.bind(this);\n  }\n\n  open() {\n    this._popupElement.classList.add('popup_opened');\n    document.addEventListener('keydown', this._handleEscClose);\n  }\n\n  close() {\n    this._popupElement.classList.remove('popup_opened');\n    document.removeEventListener('keydown', this._handleEscClose);\n  }\n\n  //функция обработки нажатия клавиши Esc для закрытия попапа\n  _handleEscClose(evt) {\n    if (evt.key === 'Escape') {\n      this.close();\n    }\n  }\n\n  //функция обработки клика за пределами области popup__container\n  _handlePopupClick(evt) {\n    if (evt.target.classList.contains(\"popup\")) {\n      this.close();\n    }\n  }\n\n  setEventListeners() {\n    this._popupCloseButton.addEventListener('click', () => this.close());\n\n    this._popupElement.addEventListener(\"mousedown\", (evt) => this._handlePopupClick(evt));\n  }\n}\n","// --- КЛАСС СОЗДАНИЯ ПОПАПА С ИЗОБРАЖЕНИЕМ ---\n\nimport Popup from \"./Popup.js\";\n\nexport default class PopupWithImage extends Popup {\n  constructor(popupSelector) {\n    super(popupSelector);\n    this._popupTitle = this._popupElement.querySelector('.popup__photo-title');\n    this._popupPhoto = this._popupElement.querySelector('.popup__photo');\n  }\n\n  open(title, link) {\n    super.open();\n    this._popupTitle.textContent = title;\n    this._popupPhoto.src = link;\n    this._popupPhoto.alt = `Фото ${title}`;\n  }\n}\n","// --- КЛАСС РАБОТЫ С ФОРМАМИ В ПОПАПАХ ---\n\nimport Popup from './Popup.js';\n\nexport default class PopupWithForm extends Popup {\n  constructor(popupSelector, handleSubmit) {\n    super(popupSelector);\n    this._handleSubmit = handleSubmit;\n    this._popupForm = this._popupElement.querySelector(\".popup__form\");\n    this._inputList = this._popupElement.querySelectorAll(\".popup__input\");\n    this._button = this._popupForm.querySelector('.popup__submit-btn');\n    this._textButton = this._button.textContent;\n  }\n\n  close() {\n    super.close();\n    this._popupForm.reset();\n  }\n\n  // метод, который собирает данные всех полей формы\n  _getInputValues() {\n    this._formValues = {};\n\n    this._inputList.forEach((input) => {\n      this._formValues[input.name] = input.value;\n    });\n\n    return this._formValues;\n  }\n\n  renderSaving(status){\n    if(status){\n      this._button.textContent = `Cохранение...`;\n    } else {\n      this._button.textContent = this._textButton;\n    }\n  }\n\n  // дополнительно добавляем обработчик сабмита формы\n  setEventListeners() {\n    super.setEventListeners();\n    this._popupForm.addEventListener(\"submit\", (evt) => {\n      evt.preventDefault();\n      this._handleSubmit(this._getInputValues());\n    });\n  }\n}\n","// --- КЛАСС ОТОБРАЖЕНИЯ ИНФОРМАЦИИ О ПОЛЬЗОВАТЕЛЕ НА СТРАНИЦЕ ---\n\nexport default class UserInfo {\n  constructor({ selectorName, selectorJob, selectorAvatar }) {\n    this._elementName =  document.querySelector(selectorName);\n    this._elementJob = document.querySelector(selectorJob);\n    this._avatar = document.querySelector(selectorAvatar);\n  }\n\n  //метод который возвращает объект с данными пользователя. Этот метод пригодится когда данные пользователя нужно будет подставить в форму при открытии\n  getUserInfo() {\n    return this._profileData = {\n      popupName: this._elementName.textContent,\n      popupJob: this._elementJob.textContent,\n    };\n  }\n\n  //метод который принимает новые данные пользователя и добавляет их на страницу.\n  setUserInfo({ popupName, popupJob, avatar}) {\n    this._elementName.textContent = popupName;\n    this._elementJob.textContent = popupJob;\n    this._avatar.src = avatar;\n  }\n}\n","export default class Api {\n  constructor({\n    baseUrl,\n    headers\n  }) {\n    this._baseUrl = baseUrl;\n    this._userUrl = `${this._baseUrl}/users/me`;\n    this._cardsUrl = `${this._baseUrl}/cards`;\n    this._likesUrl = `${this._baseUrl}/cards/likes`;\n    this._token = headers['authorization'];\n  }\n\n  getUserData() {\n    return fetch(this._userUrl, {\n        headers: {\n          authorization: this._token,\n        }\n      })\n      .then(res => {\n        if (res.ok) {\n          return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n      })\n  }\n\n  saveUserChanges({\n    popupName,\n    popupJob\n  }) {\n    return fetch(this._userUrl, {\n        method: 'PATCH',\n        headers: {\n          authorization: this._token,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: popupName,\n          about: popupJob,\n        })\n      })\n      .then(res => {\n        if (res.ok) {\n          return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n      })\n  }\n\n  getInitialCards() {\n    return fetch(this._cardsUrl, {\n        headers: {\n          authorization: this._token,\n        }\n      })\n      .then(res => {\n        if (res.ok) {\n          return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n      })\n  }\n\n  postNewCard({ name, link }) {\n    return fetch(this._cardsUrl, {\n      method: 'POST',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        link: link,\n      })\n    })\n    .then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    })\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this._cardsUrl}/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token,\n      }\n    })\n    .then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    })\n  }\n\n  likedCard(cardId) {\n    return fetch(`${this._likesUrl}/${cardId}`, {\n      method: 'PUT',\n      headers: {\n        authorization: this._token,\n      }\n    })\n    .then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    })\n  }\n\n  dislikedCard(cardId) {\n    return fetch(`${this._likesUrl}/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token,\n      }\n    })\n    .then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    })\n  }\n\n  changedAvatar(src) {\n    return fetch(`${this._userUrl}/avatar`, {\n        method: 'PATCH',\n        headers: {\n          authorization: this._token,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          avatar: src.link\n        })\n      })\n      .then(res => {\n        if (res.ok) {\n          return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n      })\n  }\n\n}\n","// --- КЛАСС СОЗДАНИЯ ПОПАПА С КНОПКОЙ ПОДТВЕРЖДЕНИЯ УДАЛЕНИЯ КАРТОЧКИ ---\n\nimport Popup from './Popup.js';\n\nexport default class PopupWithConfirm extends Popup {\n  constructor(popupSelector) {\n    super(popupSelector);\n    this._buttonConfirm = this._popupElement.querySelector('.popup__form');\n  }\n\n  setSubmitAction(submitAction) {\n    this._handleSubmitCallback = submitAction;\n  }\n\n  // дополнительно добавляем обработчик клика подтверждения\n  setEventListeners() {\n    super.setEventListeners();\n    this._buttonConfirm.addEventListener(\"submit\", (evt) => {\n      evt.preventDefault();\n      this._handleSubmitCallback()\n    });\n  }\n\n}\n","import './index.css';\n\nimport {\n  validationObject,\n  // initialCards,\n  selectorObj,\n  editButton,\n  addPhotoButton,\n  popupProfileInputs,\n  changeAvatarButton\n} from \"../utils/constants.js\";\n\nimport FormValidator from \"../components/FormValidator.js\";\nimport Card from \"../components/Card.js\";\nimport Section from \"../components/Section.js\";\nimport PopupWithImage from \"../components/popup-with-image.js\";\nimport PopupWithForm from \"../components/popup-with-form.js\";\nimport UserInfo from \"../components/user-info.js\";\nimport Api from \"../components/Api.js\";\nimport PopupWithConfirm from \"../components/PopupWithConfirm.js\";\n\n\n// --- ФУНКЦИИ ---\n//функция открытия попапа с картинкой (при клике на карточку)\nfunction handleCardClick(title, link) {\n  popupWithImage.open(title, link);\n}\n\n//функция открытия попапа с подтверждением (при клике на корзину)\nfunction handleTrashClick(id, card) {\n  popupWithConfirm.setSubmitAction(() => handlePopupConfirm(id, card))\n  popupWithConfirm.open();\n}\n\n// функция удаления карточек от пользователя (подтверждение)\nfunction handlePopupConfirm(id, card) {\n  api.deleteCard(id)\n    .then(() => {\n      card.removeCard();\n      popupWithConfirm.close();\n    })\n    .catch((err) => {\n      console.log(err);\n      popupWithConfirm.close();\n    });\n}\n\n// функция отвечающая за постановку лайка\nfunction handleLikeClick(id, isLiked, card) {\n  if (isLiked) {\n    //отправляем запрос снятия лайка\n    api.dislikedCard(id)\n      .then((data) => {\n        card.setLikes(data.likes)\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  } else {\n    //отправляем запрос на установку лайка\n    api.likedCard(id)\n      .then((data) => {\n        card.setLikes(data.likes);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n}\n\n\n// функция редактирования профиля (сабмит формы)\nfunction handlePopupProfile(inputsData) {\n  popupFormProfile.renderSaving(true);\n  api.saveUserChanges(inputsData)\n    .then((data) => {\n      userInfo.setUserInfo({\n        popupName: data.name,\n        popupJob: data.about,\n        avatar: data.avatar\n      });\n      popupFormProfile.close();\n    })\n    .catch((err) => {\n      console.log(err);\n    })\n    .finally(() => {\n      popupFormProfile.renderSaving(false);\n    })\n}\n\n// функция заполнения полей формы данными из профиля\nfunction handleTextInput() {\n  const userData = userInfo.getUserInfo();\n  popupProfileInputs.forEach(input => {\n    input.value = userData[input.name];\n  });\n}\n\n// функция создания карточек\nfunction createCard(dataCard, id) {\n  const card = new Card({\n      data: dataCard,\n      handleCardClick,\n      handleTrashClick,\n      handleLikeClick,\n    },\n    selectorObj.cardId,\n    id);\n  const newCard = card.generateCard();\n  card.setLikes(dataCard.likes);\n\n  return newCard;\n}\n\n\n// функция добавления новых карточек от пользователя (сабмит формы)\nfunction handlePopupAddCard(inputsData) {\n  popupFormAddCard.renderSaving(true);\n  api.postNewCard(inputsData)\n    .then((data) => {\n      cardList.addItemPrepend(createCard(data, data.owner._id));\n      popupFormAddCard.close();\n    })\n    .catch((err) => {\n      console.log(err);\n    })\n    .finally(() => {\n      popupFormAddCard.renderSaving(false);\n    })\n}\n\n// функция редактирования аватара пользователя (сабмит формы)\nfunction handlePopupChangeAvatar(inputsData) {\n  popupFormChangeAvatar.renderSaving(true);\n  api.changedAvatar(inputsData)\n    .then((data) => {\n      console.log(data);\n      userInfo._avatar.src = data.avatar;\n      popupFormChangeAvatar.close();\n    })\n    .catch((err) => {\n      console.log(err);\n    })\n    .finally(() => {\n      popupFormChangeAvatar.renderSaving(false);\n    })\n}\n\n\n\n\n\n\n// --- СЛУШАТЕЛИ СОБЫТИЙ ---\n//обработчик клика открытия попапа по кнопке 'Редактирования профиля'\neditButton.addEventListener('click', () => {\n  popupFormProfile.open();\n  handleTextInput();\n  validFormPopupProfile.resetValidationState();\n});\n\n//oбработчик клика открытия попапа по кнопке 'Добавление карточки'\naddPhotoButton.addEventListener('click', () => {\n  popupFormAddCard.open();\n  validFormPopupAddCard.resetValidationState();\n});\n\n//oбработчик клика открытия попапа по кнопке 'Редактирование аватара'\nchangeAvatarButton.addEventListener('click', () => {\n  popupFormChangeAvatar.open();\n  validFormPopupAddCard.resetValidationState();\n});\n\n\n\n// --- ДЕЙСТВИЯ ПРИ ЗАГРУЗКЕ СТРАНИЦЫ ---\n//создаем экземпляр класса Section\nconst cardList = new Section({\n    renderer: (cardItem, id) => {\n      cardList.addItem(createCard(cardItem, id));\n    },\n  },\n  selectorObj.elementsSelector\n);\n\n\n//создаем экземпляр класса PopupWhithImage и навешиваем слушатели событий\nconst popupWithImage = new PopupWithImage(selectorObj.popupImageSelector);\npopupWithImage.setEventListeners();\n\n//создаем экземпляр класса PopupWhithConfirm\n//и навешиваем слушатели событий\nconst popupWithConfirm = new PopupWithConfirm(selectorObj.popupConfirmSelector);\npopupWithConfirm.setEventListeners();\n\n\n\n//создаем экземпляр класса PopupWhithForm для попапа 'Редактирование профиля'\n//и навешиваем слушатели событий\nconst popupFormProfile = new PopupWithForm(selectorObj.popupProfileSelector, handlePopupProfile);\npopupFormProfile.setEventListeners();\n\n//создаем экземпляр класса PopupWhithForm для попапа 'Добавление карточки'\n//и навешиваем слушатели событий\nconst popupFormAddCard = new PopupWithForm(selectorObj.popupAddCardSelector, handlePopupAddCard);\npopupFormAddCard.setEventListeners();\n\n//создаем экземпляр класса PopupWhithForm для попапа 'Редактирование аватара'\n//и навешиваем слушатели событий\nconst popupFormChangeAvatar = new PopupWithForm(selectorObj.popupChangeAvatarSelector, handlePopupChangeAvatar);\npopupFormChangeAvatar.setEventListeners();\n\n\n//создаем экземпляры класса FormValidator и включаем валидацию форм\nconst validFormPopupAddCard = new FormValidator(validationObject, selectorObj.popupAddCardSelector);\nvalidFormPopupAddCard.enableValidation();\n\nconst validFormPopupProfile = new FormValidator(validationObject, selectorObj.popupProfileSelector);\nvalidFormPopupProfile.enableValidation();\n\nconst validFormPopupChangeAvatar = new FormValidator(validationObject, selectorObj.popupChangeAvatarSelector);\nvalidFormPopupChangeAvatar.enableValidation();\n\n\n//создаем экземпляр класса UserInfo\nconst userInfo = new UserInfo({\n  selectorName: selectorObj.profileNameSelector,\n  selectorJob: selectorObj.profileJobSelector,\n  selectorAvatar: selectorObj.avatarSelector,\n});\n\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-19',\n  headers: {\n    authorization: '249de57f-61eb-4f88-a95a-b462a0c3429a',\n    'Content-Type': 'application/json'\n  }\n});\n\n//в Promise.all передаем массив промисов, которые нужно выполнить\nPromise.all([\n    api.getUserData(),\n    api.getInitialCards()\n  ])\n  .then((values) => {\n    userInfo.setUserInfo({\n      popupName: values[0].name,\n      popupJob: values[0].about,\n      avatar: values[0].avatar,\n    })\n\n    cardList.renderItems(values[1], values[0]._id);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n"],"sourceRoot":""}