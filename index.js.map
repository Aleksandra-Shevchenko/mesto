{"version":3,"sources":["webpack://mesto/./src/utils/constants.js","webpack://mesto/./src/components/FormValidator.js","webpack://mesto/./src/components/Card.js","webpack://mesto/./src/components/Section.js","webpack://mesto/./src/components/Popup.js","webpack://mesto/./src/components/popup-with-image.js","webpack://mesto/./src/components/popup-with-form.js","webpack://mesto/./src/components/user-info.js","webpack://mesto/./src/pages/index.js"],"names":["validationObject","formSelector","inputSelector","submitButtonSelector","inactiveButtonClass","inputErrorClass","errorClass","selectorObj","container","document","querySelector","editButton","addPhotoButton","popupProfileInputs","querySelectorAll","FormValidator","config","popupSelector","this","_formSelector","_inputSelector","_submitBtnSelector","_inactiveButtonClass","_inputErrorClass","_errorClass","_formElement","inputElement","errorMessage","errorElement","id","classList","add","textContent","remove","validity","valid","_hideInputError","_showInputError","validationMessage","inputList","some","buttonElement","_hasInvalidInput","setAttribute","removeAttribute","Array","from","_toggleButtonState","forEach","addEventListener","_checkInputValidity","form","inputsArr","_setEventListeners","Card","templateSelector","data","handleCardClick","_cardSelector","_name","name","_link","link","_showPopup","content","cloneNode","_element","_getTemplate","_picture","src","alt","_handleLikeCard","_handleDeleteCard","toggle","Section","containerSelector","items","renderer","_itemsArray","_renderer","_container","item","element","prepend","Popup","_popupSelector","_popupElement","_popupCloseButton","_handleEscClose","bind","removeEventListener","evt","key","close","target","contains","_handlePopupClick","PopupWithImage","_popupTitle","_popupPhoto","title","PopupWithForm","handleSubmit","_handleSubmit","_popupForm","_inputList","reset","_formValues","input","value","preventDefault","_getInputValues","UserInfo","selectorName","selectorJob","_elementName","_elementJob","_profileData","popupName","popupJob","popupWithImage","open","createCard","dataCard","generateCard","userData","popupFormProfile","userInfo","getUserInfo","validFormPopupProfile","resetValidationState","popupFormAddCard","validFormPopupAddCard","cardList","cardItem","addItem","renderItems","setEventListeners","inputsData","setUserInfo","enableValidation"],"mappings":"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","file":"index.js","sourcesContent":["// --- ДАННЫЕ  ---\n\n//объект параметров для валидации форм\nconst validationObject = {\n  formSelector: '.popup__form',\n  inputSelector: '.popup__input',\n  submitButtonSelector: '.popup__submit-btn',\n  inactiveButtonClass: 'popup__submit-btn_inactive',\n  inputErrorClass: 'popup__input_type_error',\n  errorClass: 'popup__input-error_active',\n};\n\n//массив отображаемых карточек при загрузке страницы\nconst initialCards = [\n  {\n    name: 'Архыз',\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg'\n  },\n  {\n    name: 'Челябинская область',\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg'\n  },\n  {\n    name: 'Иваново',\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg'\n  },\n  {\n    name: 'Камчатка',\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg'\n  },\n  {\n    name: 'Холмогорский район',\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg'\n  },\n  {\n    name: 'Байкал',\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg'\n  }\n];\n\n//селекторы для создания экземпляров классов\nconst selectorObj = {\n  popupImageSelector: '.popup_type_image',\n  popupProfileSelector: '.popup_type_edit',\n  popupAddCardSelector: '.popup_type_add-card',\n  elementsSelector: '.elements',\n  profileNameSelector: '.profile__title',\n  profileJobSelector: '.profile__subtitle',\n  cardId: '#card',\n};\n\n\nconst container = document.querySelector(\".container\");\nconst editButton = container.querySelector(\".profile__edit-btn\");\nconst addPhotoButton = container.querySelector(\".profile__add-btn\");\nconst popupProfile = document.querySelector('.popup_type_edit');\nconst popupProfileInputs = popupProfile.querySelectorAll('.popup__input');\n\n\nexport {\n  validationObject,\n  initialCards,\n  editButton,\n  addPhotoButton,\n  selectorObj,\n  popupProfileInputs\n};\n","// --- КЛАСС ВАЛИДАЦИИ ФОРМ ---\n\nexport default class FormValidator {\n  constructor(config, popupSelector) {\n    this._formSelector = config.formSelector;\n    this._inputSelector = config.inputSelector;\n    this._submitBtnSelector = config.submitButtonSelector;\n    this._inactiveButtonClass = config.inactiveButtonClass;\n    this._inputErrorClass = config.inputErrorClass;\n    this._errorClass = config.errorClass;\n    this._formElement = document.querySelector(popupSelector);\n  }\n\n  //метод появления сообщения об ошибке\n  _showInputError(inputElement, errorMessage) {\n    const errorElement = this._formElement.querySelector(`#${inputElement.id}-error`);\n\n    inputElement.classList.add(this._inputErrorClass);\n    errorElement.textContent = errorMessage;\n    errorElement.classList.add(this._errorClass);\n  }\n\n  //метод скрытия сообщения об ошибке\n  _hideInputError(inputElement) {\n    const errorElement = this._formElement.querySelector(`#${inputElement.id}-error`);\n\n    inputElement.classList.remove(this._inputErrorClass);\n    errorElement.classList.remove(this._errorClass);\n    errorElement.textContent = '';\n  }\n\n\n  //метод управления сообщениями об ошибках\n  _checkInputValidity(inputElement) {\n    if(inputElement.validity.valid) {\n      this._hideInputError(inputElement);\n    } else {\n      this._showInputError(inputElement, inputElement.validationMessage);\n    }\n  }\n\n  //метод проверки на невалидные поля\n  _hasInvalidInput(inputList) {\n    return inputList.some(inputElement => {\n      return !inputElement.validity.valid;\n    });\n  }\n\n\n  //метод включения/выключения кнопки submit в форме\n  _toggleButtonState(inputList, buttonElement) {\n    if(this._hasInvalidInput(inputList)) {\n      buttonElement.setAttribute('disabled', true);\n      buttonElement.classList.add(this._inactiveButtonClass);\n    } else {\n      buttonElement.removeAttribute('disabled');\n      buttonElement.classList.remove(this._inactiveButtonClass);\n    }\n  }\n\n  //метод добавления слушателей для каждого поля ввода\n  _setEventListeners() {\n    const inputList = Array.from(this._formElement.querySelectorAll(this._inputSelector));\n    const buttonElement = this._formElement.querySelector(this._submitBtnSelector);\n    this._toggleButtonState(inputList, buttonElement);\n\n    inputList.forEach((inputElement) => {\n      inputElement.addEventListener('input', () => {\n        this._checkInputValidity(inputElement);\n\n        this._toggleButtonState(inputList, buttonElement);\n      });\n    });\n  }\n\n  //метод сброса результатов проверки формы\n  resetValidationState() {\n    const form = this._formElement.querySelector(this._formSelector);\n    const inputsArr = Array.from(form.querySelectorAll(this._inputSelector));\n    const buttonElement = form.querySelector(this._submitBtnSelector);\n\n    this._toggleButtonState(inputsArr, buttonElement);\n\n    inputsArr.forEach((inputElement) => {\n      this._hideInputError(inputElement);\n    });\n  }\n\n  //метод включения валидации\n  enableValidation() {\n    this._setEventListeners();\n  }\n}\n","// --- КЛАСС СОЗДАНИЯ КАРТОЧЕК ---\n\nexport default class Card {\n  constructor( { data, handleCardClick }, templateSelector) {\n    this._cardSelector = templateSelector;\n    this._name = data.name;\n    this._link = data.link;\n    this._showPopup = handleCardClick;\n  }\n\n  _getTemplate() {\n    const cardElement = document\n    .querySelector(this._cardSelector)\n    .content\n    .querySelector('.element')\n    .cloneNode(true);\n\n    return cardElement;\n  }\n\n  generateCard() {\n    this._element = this._getTemplate();\n\n    this._picture = this._element.querySelector('.element__pic');\n    this._picture.src = this._link;\n    this._picture.alt =`Фото ${this._name}`;\n    this._element.querySelector('.element__title').textContent = this._name;\n\n    this._setEventListeners();\n\n    return this._element;\n  }\n\n  _setEventListeners() {\n    this._picture.addEventListener('click', () => {\n      this._showPopup(this._name, this._link);\n    });\n\n    this._element.querySelector('.element__like').addEventListener('click', () => {\n      this._handleLikeCard();\n    });\n\n    this._element.querySelector('.element__trash').addEventListener('click', () => {\n      this._handleDeleteCard();\n    });\n  }\n\n  _handleLikeCard() {\n    this._element.querySelector('.element__like').classList.toggle('element__like_active');\n  }\n\n  _handleDeleteCard() {\n    this._element.remove();\n    this._element = null;\n  }\n}\n","// --- КЛАСС ОТВЕЧАЮЩИЙ ЗА ОТРИСОВКУ ЭЛЕМЕНТОВ НА СТРАНИЦЕ ---\n\nexport default class Section {\n  constructor({ items, renderer }, containerSelector) {\n    this._itemsArray = items; // массив данных, который нужно добавить на страницу при инициализации класса\n    this._renderer = renderer; // функция, которая отвечает за создание и отрисовку данных на странице\n    this._container = document.querySelector(containerSelector);\n  }\n\n  //метод, который отвечает за отрисовку всех элементов\n  renderItems() {\n    this._itemsArray.forEach(item => this._renderer(item));\n  }\n\n  //метод, который принимает DOM-элемент и добавляет его в начало контейнера\n  addItem(element) {\n    this._container.prepend(element);\n  }\n}\n","// --- КЛАСС ОТКРЫТИЯ/ЗАКРЫТИЯ ПОПАПОВ ---\n\nexport default class Popup {\n  constructor(popupSelector) {\n    this._popupSelector = popupSelector;\n    this._popupElement = document.querySelector(this._popupSelector);\n    this._popupCloseButton = this._popupElement.querySelector('.popup__close');\n    this._handleEscClose = this._handleEscClose.bind(this);\n  }\n\n  open() {\n    this._popupElement.classList.add('popup_opened');\n    document.addEventListener('keydown', this._handleEscClose);\n  }\n\n  close() {\n    this._popupElement.classList.remove('popup_opened');\n    document.removeEventListener('keydown', this._handleEscClose);\n  }\n\n  //функция обработки нажатия клавиши Esc для закрытия попапа\n  _handleEscClose(evt) {\n    if (evt.key === 'Escape') {\n      this.close();\n    }\n  }\n\n  //функция обработки клика за пределами области popup__container\n  _handlePopupClick(evt) {\n    if (evt.target.classList.contains(\"popup\")) {\n      this.close();\n    }\n  }\n\n  setEventListeners() {\n    this._popupCloseButton.addEventListener('click', () => this.close());\n\n    this._popupElement.addEventListener(\"mousedown\", (evt) => this._handlePopupClick(evt));\n  }\n}\n","// --- КЛАСС СОЗДАНИЯ ПОПАПА С ИЗОБРАЖЕНИЕМ ---\n\nimport Popup from \"./Popup.js\";\n\nexport default class PopupWithImage extends Popup {\n  constructor(popupSelector) {\n    super(popupSelector);\n    this._popupTitle = this._popupElement.querySelector('.popup__photo-title');\n    this._popupPhoto = this._popupElement.querySelector('.popup__photo');\n  }\n\n  open(title, link) {\n    super.open();\n    this._popupTitle.textContent = title;\n    this._popupPhoto.src = link;\n    this._popupPhoto.alt = `Фото ${title}`;\n  }\n}\n","// --- КЛАСС РАБОТЫ С ФОРМАМИ В ПОПАПАХ ---\n\nimport Popup from './Popup.js';\n\nexport default class PopupWithForm extends Popup {\n  constructor(popupSelector, handleSubmit) {\n    super(popupSelector);\n    this._handleSubmit = handleSubmit;\n    this._popupForm = this._popupElement.querySelector(\".popup__form\");\n    this._inputList = this._popupElement.querySelectorAll(\".popup__input\");\n  }\n\n  close() {\n    super.close();\n    this._popupForm.reset();\n  }\n\n  // метод, который собирает данные всех полей формы\n  _getInputValues() {\n    this._formValues = {};\n\n    this._inputList.forEach((input) => {\n      this._formValues[input.name] = input.value;\n    });\n\n    return this._formValues;\n  }\n\n  // дополнительно добавляем обработчик сабмита формы\n  setEventListeners() {\n    super.setEventListeners();\n    this._popupForm.addEventListener(\"submit\", (evt) => {\n      evt.preventDefault();\n      this._handleSubmit(this._getInputValues());\n    });\n  }\n}\n","// --- КЛАСС ОТОБРАЖЕНИЯ ИНФОРМАЦИИ О ПОЛЬЗОВАТЕЛЕ НА СТРАНИЦЕ ---\n\nexport default class UserInfo {\n  constructor({ selectorName, selectorJob }) {\n    this._elementName =  document.querySelector(selectorName);\n    this._elementJob = document.querySelector(selectorJob);\n  }\n\n  //который возвращает объект с данными пользователя. Этот метод пригодится когда данные пользователя нужно будет подставить в форму при открытии\n  getUserInfo() {\n    return this._profileData = {\n      popupName: this._elementName.textContent,\n      popupJob: this._elementJob.textContent,\n    };\n  }\n\n  //который принимает новые данные пользователя и добавляет их на страницу.\n  setUserInfo({ popupName, popupJob }) {\n    this._elementName.textContent = popupName;\n    this._elementJob.textContent = popupJob;\n  }\n}\n","import './index.css';\n\nimport { validationObject, initialCards, selectorObj, editButton, addPhotoButton, popupProfileInputs } from \"../utils/constants.js\";\n\nimport FormValidator from \"../components/FormValidator.js\";\nimport Card from \"../components/Card.js\";\nimport Section from \"../components/Section.js\";\nimport PopupWithImage from \"../components/popup-with-image.js\";\nimport PopupWithForm from \"../components/popup-with-form.js\";\nimport UserInfo from \"../components/user-info.js\";\n\n\n// --- ФУНКЦИИ ---\n//функция открытия попапа с картинкой (при клике на карточку)\nfunction handleCardClick(title, link) {\n  popupWithImage.open(title, link);\n}\n\n// функция редактирования профиля (сабмит формы)\nfunction handlePopupProfile(inputsData) {\n  userInfo.setUserInfo(inputsData);\n  popupFormProfile.close();\n}\n\n// функция заполнения полей формы данными из профиля\nfunction handleTextInput() {\n  const userData = userInfo.getUserInfo();\n  popupProfileInputs.forEach(input => {\n    input.value = userData[input.name];\n  });\n}\n\n// функция создания карточек\nfunction createCard(dataCard) {\n  const card = new Card({ data: dataCard, handleCardClick }, selectorObj.cardId);\n  const newCard = card.generateCard();\n\n  return newCard;\n}\n\n// функция добавления новых карточек от пользователя (сабмит формы)\nfunction handlePopupAddCard(inputsData) {\n  cardList.addItem( createCard(inputsData) );\n  popupFormAddCard.close();\n}\n\n\n\n// --- СЛУШАТЕЛИ СОБЫТИЙ ---\n//обработчик клика открытия попапа по кнопке 'Редактирования профиля'\neditButton.addEventListener('click', () => {\n  popupFormProfile.open();\n  handleTextInput();\n  validFormPopupProfile.resetValidationState();\n});\n\n//oбработчик клика открытия попапа по кнопке 'Добавление карточки'\naddPhotoButton.addEventListener('click', () => {\n  popupFormAddCard.open();\n  validFormPopupAddCard.resetValidationState();\n});\n\n\n\n// --- ДЕЙСТВИЯ ПРИ ЗАГРУЗКЕ СТРАНИЦЫ ---\n//создаем экземпляр класса Section и отрисовываем все элементы на странице\nconst cardList = new Section(\n  {\n    items: initialCards,\n    renderer: (cardItem) => {\n      cardList.addItem( createCard(cardItem) );\n    },\n  },\n  selectorObj.elementsSelector\n);\ncardList.renderItems();\n\n//создаем экземпляр класса PopupWhithImage и навешиваем слушатели событий\nconst popupWithImage = new PopupWithImage(selectorObj.popupImageSelector);\npopupWithImage.setEventListeners();\n\n//создаем экземпляр класса PopupWhithForm для попапа 'Редактирование профиля'\n//и навешиваем слушатели событий\nconst popupFormProfile = new PopupWithForm(selectorObj.popupProfileSelector, handlePopupProfile);\npopupFormProfile.setEventListeners();\n\n//создаем экземпляр класса PopupWhithForm для попапа 'Добавление карточки'\n//и навешиваем слушатели событий\nconst popupFormAddCard = new PopupWithForm(selectorObj.popupAddCardSelector, handlePopupAddCard);\npopupFormAddCard.setEventListeners();\n\n//создаем экземпляры класса FormValidator и включаем валидацию форм\nconst validFormPopupAddCard = new FormValidator(validationObject, selectorObj.popupAddCardSelector);\nvalidFormPopupAddCard.enableValidation();\n\nconst validFormPopupProfile = new FormValidator(validationObject, selectorObj.popupProfileSelector);\nvalidFormPopupProfile.enableValidation();\n\n//создаем экземпляр класса UserInfo\nconst userInfo = new UserInfo({\n  selectorName: selectorObj.profileNameSelector,\n  selectorJob: selectorObj.profileJobSelector\n});\n\n"],"sourceRoot":""}